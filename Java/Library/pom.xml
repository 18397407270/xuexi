<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!--
    maven1和maven2的modelVersion只能为4.0.0
    -->
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId><!--团体,组织的标识符,创建的项目名称包的逆向名称-->
  <artifactId>Library</artifactId><!--单独项目的唯一标识符-->
  <!--
  <version>
  一个项目的特定版本
    SNAPSHOT:表示不稳定的版本
    LATEST:某个特定构件的最新版本
    RELEASE指最后一个发布版-->
  <version>1.0-SNAPSHOT</version>
  <!--
   <packaging>
   描述了项目打包后的输出,默认是jar,常见的输出类型有:pom.jar,maven-plugin,ejb,war,ear,rar,par
  -->
  <packaging>war</packaging>
  <!--
  <name>:项目的名称,Maven产生的文档用
  -->
  <name>Library Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <!--项目的主页的url-->
  <url>http://www.example.com</url>
<!--
<properties>属性
-->
  <properties>
    <file.encoding>UTF-8</file.encoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <spring.version>4.2.2.RELEASE</spring.version><!--spring的版本-->
    <mysql.version>5.1.29</mysql.version><!--mysql版本-->
    <servlet.version>3.0-alpha-1</servlet.version><!--servlet的版本-->
    <commons-codec.version>1.9</commons-codec.version><!--Commons项目中用来处理常用的编码方法的工具类包-->
    <commons-dbcp.version>1.4</commons-dbcp.version><!--一般就是指 apache commons dbcp。dbcp：data base connection pool：数据库连接池。是一个储存java数据库连接对象的池子。-->
    <jetty.version>8.1.8.v20121106</jetty.version><!--jetty是一个开源的servlet容器，是使用Java语言编写的。-->
  </properties>

<!--
<dependencies>:依赖配置
<type> 对应packaging的类型,如果不使用这个标签,Maven默认为jar
<scope> 此元素指的是任务的类路径,以及如何限制依赖关系的传递性,
有五种可用的先定范围:compile 如果没有指定scope,maven默认是这个范围,编译依赖关系在所有classpath中都可以用,此外,这些依赖关系被传递到依赖项目
                 provided:与compile类似,但是表示您希望jdk或者容器在运行时提供它,它只适用于编译和测试classpath,不可传递
                 runtime: 表示不需要依赖关系,仅适用于编译和执行阶段。它是不可以传递的
                 test :此范围表示正常使用程序不需要依赖关系,仅使用与测试和编译阶段
                 system:与provided类似,除了你必须提供明确包含它的jar包,该artifact始终可用,并且不是在仓库中查找
                 systemPath:仅当依赖范围是系统时才可以用,否则,如果设置此元素,构建将失败,该路径必须是绝对路径
                 optional:让其他项目知道,当你使用此项目时,你不需要这种依赖性才能正常工作
                 exclusion:包含一个或者多个排出元素
-->

  <!--
  导入 servlet包
  导入数据库连接包
  导入commons包中的dbcp连接池
  导入jackson-databind包:java->json,json->java
  导入spring包:spring-beans,spring-context,spring-jdbc,spring-webmvc
  导入mybatis包
  导入mybatis-spring适配器

  -->
  <dependencies>
    <!--
    导入servlet包
    -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>${servlet.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <!--
    导入spring
    -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!--
    导入commons包
    -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>${commons-dbcp.version}</version>
    </dependency>
    <!--
    导入mysql连接包
    -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql.version}</version>
    </dependency>

    <!--
    FasterXML Jackson是美国FasterXML公司的一款适用于Java的数据处理工具。
    Jackson-databind是其中的一个具有数据绑定功能的组件。
    Jackson-databind可以将Java对象转换成json对象，同样也可以将json转换成Java对象。
    -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.10.3</version>
    </dependency>

    <!--
    mybatis-spring适配器
    -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>1.3.0</version>
    </dependency>

    <!--
    mybatis ORM框架
    -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.4.1</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>Library</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
          <configuration>
            <encoding>UTF-8</encoding>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <!--
          一个用于mvn 生命周期的测试阶段的插件
          -->
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.19.1</version>
          <configuration>
            <!--
            不知道有什么用
            -->
            <parallel>methods</parallel>
            <threadCount>10</threadCount>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
